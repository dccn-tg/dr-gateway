// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseBodyCollectionMetadata JSON object containing collection metadata.
//
// swagger:model responseBodyCollectionMetadata
type ResponseBodyCollectionMetadata struct {

	// collection identifier
	// Required: true
	Identifier *string `json:"identifier"`

	// collection DOI
	// Required: true
	IdentifierDOI *string `json:"identifierDOI"`

	// number of files in the collection
	// Required: true
	NumberOfFiles *int64 `json:"numberOfFiles"`

	// organisational unit
	// Required: true
	OrganisationalUnit *string `json:"organisationalUnit"`

	// collection path
	// Required: true
	Path *string `json:"path"`

	// project identifier
	// Required: true
	ProjectID *string `json:"projectID"`

	// collection storage quota
	// Required: true
	QuotaInBytes *int64 `json:"quotaInBytes"`

	// size of data in the collection
	// Required: true
	SizeInBytes *int64 `json:"sizeInBytes"`

	// state
	// Required: true
	State *CollectionState `json:"state"`

	// type
	// Required: true
	Type *CollectionType `json:"type"`
}

// Validate validates this response body collection metadata
func (m *ResponseBodyCollectionMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifierDOI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationalUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotaInBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSizeInBytes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseBodyCollectionMetadata) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateIdentifierDOI(formats strfmt.Registry) error {

	if err := validate.Required("identifierDOI", "body", m.IdentifierDOI); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateNumberOfFiles(formats strfmt.Registry) error {

	if err := validate.Required("numberOfFiles", "body", m.NumberOfFiles); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateOrganisationalUnit(formats strfmt.Registry) error {

	if err := validate.Required("organisationalUnit", "body", m.OrganisationalUnit); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectID", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateQuotaInBytes(formats strfmt.Registry) error {

	if err := validate.Required("quotaInBytes", "body", m.QuotaInBytes); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateSizeInBytes(formats strfmt.Registry) error {

	if err := validate.Required("sizeInBytes", "body", m.SizeInBytes); err != nil {
		return err
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this response body collection metadata based on the context it is used
func (m *ResponseBodyCollectionMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseBodyCollectionMetadata) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *ResponseBodyCollectionMetadata) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseBodyCollectionMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseBodyCollectionMetadata) UnmarshalBinary(b []byte) error {
	var res ResponseBodyCollectionMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
