// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CollectionState collection state
//
// swagger:model collectionState
type CollectionState string

func NewCollectionState(value CollectionState) *CollectionState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CollectionState.
func (m CollectionState) Pointer() *CollectionState {
	return &m
}

const (

	// CollectionStateEditable captures enum value "editable"
	CollectionStateEditable CollectionState = "editable"

	// CollectionStateReviewableInternal captures enum value "reviewable_internal"
	CollectionStateReviewableInternal CollectionState = "reviewable_internal"

	// CollectionStateFairReview captures enum value "fair_review"
	CollectionStateFairReview CollectionState = "fair_review"

	// CollectionStateReviewableExternal captures enum value "reviewable_external"
	CollectionStateReviewableExternal CollectionState = "reviewable_external"

	// CollectionStateArchived captures enum value "archived"
	CollectionStateArchived CollectionState = "archived"

	// CollectionStatePublished captures enum value "published"
	CollectionStatePublished CollectionState = "published"

	// CollectionStateUnknown captures enum value "unknown"
	CollectionStateUnknown CollectionState = "unknown"
)

// for schema
var collectionStateEnum []interface{}

func init() {
	var res []CollectionState
	if err := json.Unmarshal([]byte(`["editable","reviewable_internal","fair_review","reviewable_external","archived","published","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		collectionStateEnum = append(collectionStateEnum, v)
	}
}

func (m CollectionState) validateCollectionStateEnum(path, location string, value CollectionState) error {
	if err := validate.EnumCase(path, location, value, collectionStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this collection state
func (m CollectionState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCollectionStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this collection state based on context it is used
func (m CollectionState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
